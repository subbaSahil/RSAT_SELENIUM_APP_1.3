============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.1, pluggy-1.6.0 -- C:\Users\SahilSubba\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\python.exe
cachedir: .pytest_cache
metadata: {'Python': '3.12.10', 'Platform': 'Windows-11-10.0.26100-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'allure-pytest': '2.14.3', 'anyio': '4.9.0', 'html': '4.1.1', 'metadata': '3.1.1', 'rerunfailures': '15.1', 'xdist': '3.7.0'}, 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk-17'}
rootdir: C:\Users\SahilSubba\Desktop\javascript\RsatA_project\build-1.2
configfile: pytest.ini
testpaths: tests
plugins: allure-pytest-2.14.3, anyio-4.9.0, html-4.1.1, metadata-3.1.1, rerunfailures-15.1, xdist-3.7.0
collecting ... collected 4 items

tests/script_data_test_1_test.py::test[data0] PASSED                     [ 25%]
tests/script_data_test_1_test.py::test[data1] FAILED                     [ 50%]
tests/script_data_test_2_test.py::test FAILED                            [ 75%]
tests/script_data_test_3_test.py::test[data0] FAILED                     [100%]

================================== FAILURES ===================================
_________________________________ test[data1] _________________________________

data = {'Description/GroupDescription': 'Demo2asdasd', 'Dimension value/GroupValue': '15'}

    @pytest.mark.ui
    @pytest.mark.parametrize("data", test_data)
    def test(data):
        base = BaseTest("user1",incognito=True)
        driver = base.driver
        actions = base.actions
        recorder=ScreenRecorder()
        try:
            recorder.start()
            dimension = data['Dimension value/GroupValue']
            description = data['Description/GroupDescription']
            Interactions.wait_and_click(driver, By.XPATH, "//div[@aria-label='Modules']")
    # Clicking navigation: General ledger
            nav1 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='General ledger']")
    # Clicking navigation: Chart of accounts
            nav2 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='Chart of accounts']")
    # Clicking navigation: Dimensions
            nav3 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='Dimensions']")
    # Clicking navigation: Financial dimensions
            base.steps_count +=1
            nav4 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='Financial dimensions']",base.steps_count, "Go to General ledger > Chart of accounts > Dimensions > Financial dimensions.")
            time.sleep(3)
            Interactions.assert_navigation(driver,nav1, nav2, nav3, nav4)
            base.steps_count +=1
            if(Interactions.check_element_exist(driver, By.XPATH, "//button[@name='Close']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@name='Close']",base.steps_count, "Click Close.")
            elif(Interactions.check_element_exist(driver, By.XPATH, "//button[@data-dyn-controlname='Close']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@data-dyn-controlname='Close']",base.steps_count,"Click Close.")
    # Inputting into: QuickFilter
            base.steps_count +=1
            if(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@name,'QuickFilter')]")):
                locator=Interactions.get_locator(driver, By.XPATH, "//input[contains(@name,'QuickFilter')]")
                Interactions.clear_input_field_and_send_keys(driver, By.XPATH, locator, "cargo",base.steps_count,"Use the Quick Filter to find records. For example, filter on the Dimension name field with a value of 'cargo'.")
                Interactions.press_enter(driver, By.XPATH, locator)
            elif(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@aria-label,'')]")):
                locator=Interactions.get_locator(driver, By.XPATH, "//input[contains(@aria-label,'')]")
                Interactions.clear_input_field_and_send_keys(driver, By.XPATH, locator, "cargo",base.steps_count,"Use the Quick Filter to find records. For example, filter on the Dimension name field with a value of 'cargo'.")
                Interactions.press_enter(driver, By.XPATH, locator)
            base.steps_count +=1
            if(Interactions.check_element_exist(driver, By.XPATH, "//button[@name='DimensionValueDetails']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@name='DimensionValueDetails']",base.steps_count,"Click Dimension values.")
            elif(Interactions.check_element_exist(driver, By.XPATH, "//button[@data-dyn-controlname='DimensionValueDetails']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@data-dyn-controlname='DimensionValueDetails']",base.steps_count,"Click Dimension values.")
            elif(Interactions.check_element_exist(driver, By.XPATH, "//button[@aria-label='Dimension values']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@aria-label='Dimension values']",base.steps_count,"Click Dimension values.")
            else:
                Interactions.wait_and_click(driver, By.XPATH, "//div[@data-dyn-controlname='ActionPane']//div[@class='appBar-toolbar']//div[@data-dyn-role='OverflowButton']")
                if(Interactions.check_element_exist(driver, By.XPATH, "//div[@class='overflow-menu sysPopup allowFlyoutClickPropagation']//button[@name='DimensionValueDetails']")):
                    Interactions.wait_and_click(driver, By.XPATH, "//div[@class='overflow-menu sysPopup allowFlyoutClickPropagation']//button[@name='DimensionValueDetails']",base.steps_count,"Click Dimension values.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "//div[@class='overflow-menu sysPopup allowFlyoutClickPropagation']//button[@aria-label='Dimension values']")):
                    Interactions.wait_and_click(driver, By.XPATH, "//div[@class='overflow-menu sysPopup allowFlyoutClickPropagation']//button[@aria-label='Dimension values']",base.steps_count,"Click Dimension values.")
            base.steps_count +=1
            if(Interactions.check_element_exist(driver, By.XPATH, "//button[@name='SystemDefinedNewButton']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@name='SystemDefinedNewButton']",base.steps_count, "Click New.")
            elif(Interactions.check_element_exist(driver, By.XPATH, "//button[@data-dyn-controlname='SystemDefinedNewButton']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@data-dyn-controlname='SystemDefinedNewButton']",base.steps_count,"Click New.")
            base.steps_count +=1
    # Inputting into: GroupValue
            if(Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@name,'GroupValue')]") or Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@aria-label,'Dimension value')]") ):
                #clicking inside grid: GroupValue
                if(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@name,'GroupValue')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"//input[contains(@name,'GroupValue')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@name,'GroupValue')])[1]", dimension,base.steps_count,"In the Dimension value field, type a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@aria-label,'Dimension value')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH, "//input[contains(@aria-label,'Dimension value')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@aria-label,'Dimension value')])[1]", dimension,base.steps_count,"In the Dimension value field, type a value.")
            else:
                if(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@name,'GroupValue')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@name,'GroupValue')]", dimension,base.steps_count,"In the Dimension value field, type a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@aria-label,'Dimension value')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@aria-label,'Dimension value')]", dimension,base.steps_count,"In the Dimension value field, type a value.")
            Interactions.press_enter(driver, By.XPATH, "//body")
            base.steps_count +=1
    # Inputting into: GroupDescription
            if(Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@name,'GroupDescription')]") or Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@aria-label,'Description')]") ):
                #clicking inside grid: GroupDescription
                if(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@name,'GroupDescription')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"//input[contains(@name,'GroupDescription')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@name,'GroupDescription')])[1]", description,base.steps_count,"In the Description field, type a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@aria-label,'Description')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH, "//input[contains(@aria-label,'Description')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@aria-label,'Description')])[1]", description,base.steps_count,"In the Description field, type a value.")
            else:
                if(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@name,'GroupDescription')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@name,'GroupDescription')]", description,base.steps_count,"In the Description field, type a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@aria-label,'Description')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@aria-label,'Description')]", description,base.steps_count,"In the Description field, type a value.")
            Interactions.press_enter(driver, By.XPATH, "//body")
            base.steps_count +=1
            base.steps_count +=1
            Interactions.wait_and_click(driver, By.XPATH, "//button[@name='SystemDefinedSaveButton']",base.steps_count, "Click Save.")
            assert True
        except Exception as e:
            base.test_passed = False
>           raise e

tests\script_data_test_1_test.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\script_data_test_1_test.py:36: in test
    Interactions.assert_navigation(driver,nav1, nav2, nav3, nav4)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="104931e8171324c74556098dcb02d956")>
expected_items = ('General ledger', 'Chart of accounts', 'Dimensions', 'Financial dimensions')
navigation_xpath = "//ol[@class='navigationBar-crumbList']//li"
navigated_items = []

    def assert_navigation(driver, *expected_items):
        navigation_xpath = "//ol[@class='navigationBar-crumbList']//li"
        navigated_items = driver.find_elements(By.XPATH, navigation_xpath)
    
        navigated_items_texts = [item.text.strip() for item in navigated_items]
        print(f"Navigation found: {navigated_items_texts}")
    
        expected_path = list(expected_items)
        actual_path = navigated_items_texts[-len(expected_path):]
    
        if len(navigated_items_texts) < len(expected_path):
            take_screenshot_on_failure(driver)
>           raise AssertionError(f"Not enough navigation items found.\nExpected at least {len(expected_path)}, got {len(navigated_items_texts)}\nNavigation: {navigated_items_texts}")
E           AssertionError: Not enough navigation items found.
E           Expected at least 4, got 0
E           Navigation: []

Utils\Interactions.py:720: AssertionError
---------------------------- Captured stdout call -----------------------------
Login Successful as user1\n\u2705 Clicked element with base_xpath: //div[@aria-label='Modules']\n\u2705 Clicked element with base_xpath: //a[@data-dyn-title='General ledger']\n\u2705 Clicked element with base_xpath: //a[@data-dyn-title='Financial dimensions']\nNavigation found: []\n\U0001f4f8 Screenshot saved: reports/screens\\script_data_test_1_test_20250708_151309.png\n\u274c Test case failed\n\U0001f4f8 Screenshot saved: reports/screens\\script_data_test_1_test_20250708_151310.png\n\U0001f5d1\ufe0f Discarded failed test recording.
____________________________________ test _____________________________________

    @pytest.mark.ui
    def test():
        base = BaseTest("user1",incognito=True)
        driver = base.driver
        actions = base.actions
        recorder=ScreenRecorder()
        try:
            recorder.start()
            Interactions.wait_and_click(driver, By.XPATH, "//div[@aria-label='Modules']")
    # Clicking navigation: Procurement and sourcing
            nav1 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='Procurement and sourcing']")
    # Clicking navigation: Purchase orders
            nav2 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='Purchase orders']")
    # Clicking navigation: All purchase orders
            base.steps_count +=1
            nav3 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='All purchase orders']",base.steps_count, "Go to Procurement and sourcing > Purchase orders > All purchase orders.")
            time.sleep(3)
            Interactions.assert_navigation(driver,nav1, nav2, nav3)
            base.steps_count +=1
    # Clicking filter manager: SystemDefinedFilterManager
            column_to_open = "Purchase order"
            open_divs = driver.find_elements(By.XPATH, "//div/parent::div[contains(@class, 'dyn-headerCell')]")
            filter_manager_cloumn_last_opened = ''
            for i, div in enumerate(open_divs, start=1):
                class_attr = div.get_attribute('class')
                if 'hasOpenPopup' in class_attr:
                    filter_manager_cloumn_last_opened = Interactions.get_element_text(driver, By.XPATH, f"(//div/parent::div[contains(@class, 'dyn-headerCell')])[1]")
                    break
            if filter_manager_cloumn_last_opened == 'Purchase order' and filter_manager_cloumn_last_opened != '':
                Interactions.wait_and_click(driver, By.XPATH, "//div[text()='Purchase order']")
                Interactions.wait_and_click(driver, By.XPATH, "//div[text()='Purchase order']", base.steps_count,"Open Purchase order column filter.")
            else:
                Interactions.wait_and_click(driver, By.XPATH, "//div[text()='Purchase order']", base.steps_count,"Open Purchase order column filter.")
            base.steps_count +=1
            filter_manager_data = Interactions.extract_value_and_operator_from_description("Enter a filter value of '00000823' on the 'Purchase order' field using the 'is exactly' filter operator.")
            operator = filter_manager_data['operator']
            new_val = filter_manager_data['value']
            field_name = filter_manager_data['field_name']
            drop_down_item = "//input[contains(@aria-label,'Filter field: "+field_name+",')]/ancestor::div[@class='columnHeader-popup sysPopup']/ancestor::body/child::div[@class='sysPopup flyoutButton-flyOut layout-root-scope']//button//span[text()='"+operator+"']"
            input_field = "//input[contains(@aria-label,'Filter field: "+field_name+",')]"
            apply_button = "//input[contains(@aria-label,'Filter field: "+field_name+", operator: ')]//ancestor::div/child::div[@class='columnHeaderPopup-buttons']//span[text()='Apply']/ancestor::button"
            dropDown_button = "//span[contains(@class,'button-label-dropDown')]/ancestor::button[contains(@class,'dynamicsButton')][ancestor::div[@class='filterFieldContainer']//input[contains(@aria-label,'Filter field: "+field_name+"')]]"
            Interactions.wait_and_click(driver, By.XPATH, dropDown_button)
            Interactions.wait_and_click(driver, By.XPATH, drop_down_item)
            if(Interactions.check_element_exist(driver, By.XPATH, "//div[contains(@class,'popupShadow popupView preview')]")):
                other_element = driver.find_element(By.XPATH, "//div[text()='" + field_name + "']")
                actions.move_to_element(other_element).perform()
            if operator == 'is one of' or operator == 'matches':
                new_val = Interactions.extract_multiple_values(new_val)
                for new_val_value in new_val:
                    Interactions.wait_and_send_keys(driver, By.XPATH, input_field, new_val_value)
                    Interactions.wait_and_click(driver, By.XPATH, apply_button)
            elif operator == 'between':
                new_val = Interactions.extract_dates(new_val)
                from_date_locator = "(//input[contains(@aria-label,'Filter field: " + field_name + ",')])[1]"
                to_date_locator = "(//input[contains(@aria-label,'Filter field: " + field_name + ",')])[2]"
                Interactions.wait_and_send_keys(driver, By.XPATH, from_date_locator, new_val[0])
                Interactions.wait_and_send_keys(driver, By.XPATH, to_date_locator, new_val[1])
            else:
                Interactions.wait_and_send_keys(driver, By.XPATH, input_field, new_val)
            Interactions.wait_and_click(driver, By.XPATH, apply_button, base.steps_count,"Enter a filter value of '00000823' on the 'Purchase order' field using the 'is exactly' filter operator.")
            base.steps_count +=1
    # Clicking button: Grid
            user_input = input("Press data to select: ")
            Interactions.scroll_and_click_row(driver, By.XPATH, "//div[contains(@class,'fixedDataTableRowLayout_')]/ancestor::div[@role='grid']", f"//input[@value='{user_input}']", base.steps_count,"In the list, click the link in the selected row.")
            Interactions.press_enter(driver, By.XPATH, "//input[@value='"+user_input+"']")
            base.steps_count +=1
    # Clicking (default) on: PurchOrder
            time.sleep(3)
            Interactions.wait_and_click(driver, By.XPATH, "//button/parent::div[@data-dyn-controlname='PurchOrder']",base.steps_count,"On the Action Pane, click Purchase order.")
            base.steps_count +=1
    # Clicking (default) on: General
            time.sleep(3)
            Interactions.wait_and_click(driver, By.XPATH, "//button/parent::div[@data-dyn-controlname='General']",base.steps_count,"On the Action Pane, click General.")
            base.steps_count +=1
            if(Interactions.check_element_exist(driver, By.XPATH, "//button[@name='OrderReferences']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@name='OrderReferences']",base.steps_count,"Click Related orders.")
            elif(Interactions.check_element_exist(driver, By.XPATH, "//button[@data-dyn-controlname='OrderReferences']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@data-dyn-controlname='OrderReferences']",base.steps_count,"Click Related orders.")
            elif(Interactions.check_element_exist(driver, By.XPATH, "//button[@aria-label='Related orders']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@aria-label='Related orders']",base.steps_count,"Click Related orders.")
            else:
                Interactions.wait_and_click(driver, By.XPATH, "//div[@data-dyn-controlname='ActionPane']//div[@class='appBar-toolbar']//div[@data-dyn-role='OverflowButton']")
                if(Interactions.check_element_exist(driver, By.XPATH, "//div[@class='overflow-menu sysPopup allowFlyoutClickPropagation']//button[@name='OrderReferences']")):
                    Interactions.wait_and_click(driver, By.XPATH, "//div[@class='overflow-menu sysPopup allowFlyoutClickPropagation']//button[@name='OrderReferences']",base.steps_count,"Click Related orders.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "//div[@class='overflow-menu sysPopup allowFlyoutClickPropagation']//button[@aria-label='Related orders']")):
                    Interactions.wait_and_click(driver, By.XPATH, "//div[@class='overflow-menu sysPopup allowFlyoutClickPropagation']//button[@aria-label='Related orders']",base.steps_count,"Click Related orders.")
            base.steps_count +=1
            if(Interactions.check_element_exist(driver, By.XPATH, "//button[@name='OkButton']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@name='OkButton']",base.steps_count, "Click OK.")
            elif(Interactions.check_element_exist(driver, By.XPATH, "//button[@data-dyn-controlname='OkButton']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@data-dyn-controlname='OkButton']",base.steps_count,"Click OK.")
    # Closing the page
            base.steps_count +=1
            Interactions.click_back_button(driver, By.XPATH, "//button[@data-dyn-controlname='SystemDefinedCloseButton']", base.steps_count)
            time.sleep(1)
            assert True
        except Exception as e:
            base.test_passed = False
>           raise e

tests\script_data_test_2_test.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\script_data_test_2_test.py:27: in test
    Interactions.assert_navigation(driver,nav1, nav2, nav3)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

driver = <selenium.webdriver.chrome.webdriver.WebDriver (session="b60a1d7d6f3eaece63f0ca241d3b8b86")>
expected_items = ('Procurement and sourcing', 'Purchase orders', 'All purchase orders')
navigation_xpath = "//ol[@class='navigationBar-crumbList']//li"
navigated_items = []

    def assert_navigation(driver, *expected_items):
        navigation_xpath = "//ol[@class='navigationBar-crumbList']//li"
        navigated_items = driver.find_elements(By.XPATH, navigation_xpath)
    
        navigated_items_texts = [item.text.strip() for item in navigated_items]
        print(f"Navigation found: {navigated_items_texts}")
    
        expected_path = list(expected_items)
        actual_path = navigated_items_texts[-len(expected_path):]
    
        if len(navigated_items_texts) < len(expected_path):
            take_screenshot_on_failure(driver)
>           raise AssertionError(f"Not enough navigation items found.\nExpected at least {len(expected_path)}, got {len(navigated_items_texts)}\nNavigation: {navigated_items_texts}")
E           AssertionError: Not enough navigation items found.
E           Expected at least 3, got 0
E           Navigation: []

Utils\Interactions.py:720: AssertionError
---------------------------- Captured stdout call -----------------------------
Login Successful as user1\n\u2705 Clicked element with base_xpath: //div[@aria-label='Modules']\n\u2705 Clicked element with base_xpath: //a[@data-dyn-title='Procurement and sourcing']\n\u2705 Clicked element with base_xpath: //a[@data-dyn-title='All purchase orders']\nNavigation found: []\n\U0001f4f8 Screenshot saved: reports/screens\\script_data_test_2_test_20250708_151344.png\n\u274c Test case failed\n\U0001f4f8 Screenshot saved: reports/screens\\script_data_test_2_test_20250708_151345.png\n\U0001f5d1\ufe0f Discarded failed test recording.
_________________________________ test[data0] _________________________________

data = {'Charge description/MarkupAutoTable_MarkupAutoTableDescription': 'Demo123asd', 'Charges code/MarkupAutoLine_MarkupCode': 'DAP', 'Charges value/MarkupAutoLine_Value': '12.00', 'Customer relation/MarkupAutoTable_AccountRelation': 'US-004'}

    @pytest.mark.ui
    @pytest.mark.parametrize("data", test_data)
    def test(data):
        base = BaseTest("user1",incognito=True)
        driver = base.driver
        actions = base.actions
        recorder=ScreenRecorder()
    
        try:
            recorder.start()
            relation = data['Customer relation/MarkupAutoTable_AccountRelation']
            description = data['Charge description/MarkupAutoTable_MarkupAutoTableDescription']
            charges = data['Charges code/MarkupAutoLine_MarkupCode']
            value = data['Charges value/MarkupAutoLine_Value']
            Interactions.wait_and_click(driver, By.XPATH, "//div[@aria-label='Modules']")
    # Clicking navigation: Accounts receivable
            nav1 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='Accounts receivable']")
    # Clicking navigation: Charges setup
            nav2 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='Charges setup']")
    # Clicking navigation: Auto charges
            base.steps_count +=1
            nav3 = Interactions.click_nav(driver, By.XPATH, "//a[@data-dyn-title='Auto charges']",base.steps_count, "Go to Accounts receivable > Charges setup > Auto charges.")
            time.sleep(3)
            Interactions.assert_navigation(driver,nav1, nav2, nav3)
            base.steps_count +=1
            if(Interactions.check_element_exist(driver, By.XPATH, "//button[@name='SystemDefinedNewButton']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@name='SystemDefinedNewButton']",base.steps_count, "Click New.")
            elif(Interactions.check_element_exist(driver, By.XPATH, "//button[@data-dyn-controlname='SystemDefinedNewButton']")):
                Interactions.wait_and_click(driver, By.XPATH, "//button[@data-dyn-controlname='SystemDefinedNewButton']",base.steps_count,"Click New.")
            base.steps_count +=1
    # Inputting into: MarkupAutoTable_AccountRelation
            if(Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@name,'MarkupAutoTable_AccountRelation')]") or Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@aria-label,'Customer relation')]") ):
                #clicking inside grid: MarkupAutoTable_AccountRelation
                if(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@name,'MarkupAutoTable_AccountRelation')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"//input[contains(@name,'MarkupAutoTable_AccountRelation')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@name,'MarkupAutoTable_AccountRelation')])[1]", relation,base.steps_count,"In the Customer relation field, enter or select a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@aria-label,'Customer relation')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH, "//input[contains(@aria-label,'Customer relation')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@aria-label,'Customer relation')])[1]", relation,base.steps_count,"In the Customer relation field, enter or select a value.")
            else:
                if(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@name,'MarkupAutoTable_AccountRelation')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@name,'MarkupAutoTable_AccountRelation')]", relation,base.steps_count,"In the Customer relation field, enter or select a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@aria-label,'Customer relation')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@aria-label,'Customer relation')]", relation,base.steps_count,"In the Customer relation field, enter or select a value.")
            Interactions.press_enter(driver, By.XPATH, "//body")
            base.steps_count +=1
            base.steps_count +=1
    #    "Skipping grid selection due input in the ancestor"
            base.steps_count +=1
    # Inputting into: MarkupAutoTable_MarkupAutoTableDescription
            if(Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@name,'MarkupAutoTable_MarkupAutoTableDescription')]") or Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@aria-label,'Charge description')]") ):
                #clicking inside grid: MarkupAutoTable_MarkupAutoTableDescription
                if(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@name,'MarkupAutoTable_MarkupAutoTableDescription')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"//input[contains(@name,'MarkupAutoTable_MarkupAutoTableDescription')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@name,'MarkupAutoTable_MarkupAutoTableDescription')])[1]", description,base.steps_count,"In the Charge description field, type a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@aria-label,'Charge description')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH, "//input[contains(@aria-label,'Charge description')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@aria-label,'Charge description')])[1]", description,base.steps_count,"In the Charge description field, type a value.")
            else:
                if(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@name,'MarkupAutoTable_MarkupAutoTableDescription')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@name,'MarkupAutoTable_MarkupAutoTableDescription')]", description,base.steps_count,"In the Charge description field, type a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@aria-label,'Charge description')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@aria-label,'Charge description')]", description,base.steps_count,"In the Charge description field, type a value.")
            Interactions.press_enter(driver, By.XPATH, "//body")
            base.steps_count +=1
            base.steps_count +=1
            Interactions.wait_and_click(driver, By.XPATH, "//button[@name='SystemDefinedSaveButton']",base.steps_count, "Click Save.")
            base.steps_count +=1
    #    "Skipping grid since it is deafault behavior of d365"
            base.steps_count +=1
    # Inputting into: MarkupAutoLine_MarkupCode
            if(Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@name,'MarkupAutoLine_MarkupCode')]") or Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@aria-label,'Charges code')]") ):
                #clicking inside grid: MarkupAutoLine_MarkupCode
                if(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@name,'MarkupAutoLine_MarkupCode')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"//input[contains(@name,'MarkupAutoLine_MarkupCode')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@name,'MarkupAutoLine_MarkupCode')])[1]", charges,base.steps_count,"In the Charges code field, enter or select a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@aria-label,'Charges code')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH, "//input[contains(@aria-label,'Charges code')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@aria-label,'Charges code')])[1]", charges,base.steps_count,"In the Charges code field, enter or select a value.")
            else:
                if(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@name,'MarkupAutoLine_MarkupCode')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@name,'MarkupAutoLine_MarkupCode')]", charges,base.steps_count,"In the Charges code field, enter or select a value.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@aria-label,'Charges code')]")):
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@aria-label,'Charges code')]", charges,base.steps_count,"In the Charges code field, enter or select a value.")
            Interactions.press_enter(driver, By.XPATH, "//body")
            base.steps_count +=1
    # Clicking button: Grid
            user_input = input("Press data to select: ")
            Interactions.scroll_and_click_row(driver, By.XPATH, "//div[contains(@class,'fixedDataTableRowLayout_')]/ancestor::div[@role='grid']", f"//input[@value='{user_input}']", base.steps_count,"In the list, select row 3.")
            Interactions.press_enter(driver, By.XPATH, "//input[@value='"+user_input+"']")
            base.steps_count +=1
    #    "Skipping grid selection due input in the ancestor"
            base.steps_count +=1
            if(Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@name,'MarkupAutoLine_Value')]") or Interactions.check_input_ancestor_is_table(driver, By.XPATH, "//input[contains(@aria-label,'Charges value')]") ):
                #clicking inside grid: MarkupAutoLine_Value
                if(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@name,'MarkupAutoLine_Value')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"(//input[contains(@name,'MarkupAutoLine_Value')])[1]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@name,'MarkupAutoLine_Value')])[1]",value, base.steps_count,"In the Charges value field, enter a number.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "(//input[contains(@aria-label,'Charges value')])[1]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"(//input[contains(@aria-label,'Charges value')])[1]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "(//input[contains(@aria-label,'Charges value')])[1]", value, base.steps_count,"In the Charges value field, enter a number.")
            else:
                if(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@name,'MarkupAutoLine_Value')]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"//input[contains(@name,'MarkupAutoLine_Value')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@name,'MarkupAutoLine_Value')]", value, base.steps_count,"In the Charges value field, enter a number.")
                elif(Interactions.check_element_exist(driver, By.XPATH, "//input[contains(@aria-label,'Charges value')]")):
                    actions.move_to_element(driver.find_element(By.XPATH,"//input[contains(@aria-label,'Charges value')]")).perform()
                    Interactions.clear_input_field_and_send_keys(driver, By.XPATH, "//input[contains(@aria-label,'Charges value')]", value, base.steps_count,"In the Charges value field, enter a number.")
                Interactions.press_enter(driver, By.XPATH, "//body")
            base.steps_count +=1
            base.steps_count +=1
            Interactions.wait_and_click(driver, By.XPATH, "//button[@name='SystemDefinedSaveButton']",base.steps_count, "Click Save.")
            assert True
        except Exception as e:
            base.test_passed = False
>           raise e

tests\script_data_test_3_test.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\script_data_test_3_test.py:100: in test
    user_input = input("Press data to select: ")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.capture.DontReadFromInput object at 0x000002C5B4098B00>
size = -1

    def read(self, size: int = -1) -> str:
>       raise OSError(
            "pytest: reading from stdin while output is captured!  Consider using `-s`."
        )
E       OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.

..\..\..\..\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_pytest\capture.py:229: OSError
---------------------------- Captured stdout call -----------------------------
Login Successful as user1\n\u2705 Clicked element with base_xpath: //div[@aria-label='Modules']\n\u2705 Clicked element with base_xpath: //a[@data-dyn-title='Accounts receivable']\n\u2705 Clicked element with base_xpath: //a[@data-dyn-title='Auto charges']\nNavigation found: ['Accounts receivable', 'Charges setup', 'Auto charges']\nNavigation verified successfully.\n\u2705 Clicked element with base_xpath: //button[@name='SystemDefinedNewButton']\n\u2705 Clicked element with base_xpath: //button[@name='SystemDefinedSaveButton']\nPress data to select: \u274c Test case failed\n\U0001f4f8 Screenshot saved: reports/screens\\script_data_test_3_test_20250708_151517.png\n\U0001f5d1\ufe0f Discarded failed test recording.
- generated xml file: C:\Users\SahilSubba\Desktop\javascript\RsatA_project\build-1.2\reports\report.xml -
- Generated html report: file:///C:/Users/SahilSubba/Desktop/javascript/RsatA_project/build-1.2/reports/report.html -
=========================== short test summary info ===========================
FAILED tests/script_data_test_1_test.py::test[data1] - AssertionError: Not en...
FAILED tests/script_data_test_2_test.py::test - AssertionError: Not enough na...
FAILED tests/script_data_test_3_test.py::test[data0] - OSError: pytest: readi...
=================== 3 failed, 1 passed in 238.13s (0:03:58) ===================
